#!/bin/bash
# set -e # Temporarily disabled for debugging

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
CADDYFILE="${SCRIPT_DIR}/Caddyfile"
BASE="${SCRIPT_DIR}/Caddyfile.base"
DOMAINS="${SCRIPT_DIR}/domains.conf"

CMD="$1"
NAME="$2"
PORT="$3"

is_mkcert_installed() {
  command -v mkcert &> /dev/null
}

install_mkcert() {
  if is_mkcert_installed; then
    echo "mkcert is already installed."
    return 0
  fi

  OS="$(uname -s)"

  if [ "$OS" = "Darwin" ]; then
    brew install mkcert
  elif [ "$OS" = "Linux" ]; then
    sudo apt install libnss3-tools
    curl -JLO https://github.com/FiloSottile/mkcert/releases/latest/download/mkcert-v$(uname -s)-$(uname -m)
    chmod +x mkcert-*
    sudo mv mkcert-* /usr/local/bin/mkcert
  else
    echo "Unsupported OS: $OS"
    exit 1
  fi
}

setup() {
  if ! is_mkcert_installed; then
    echo "mkcert not found. Attempting to install..."
    install_mkcert
  fi
  mkcert -install
  mkdir -p mkcert
  mkcert -cert-file mkcert/localhost.pem -key-file mkcert/localhost-key.pem "*.localhost"
  exit 0
}

usage() {
  echo "Usage:"
  echo "  ./lr up <name> <port>     # Add or update domain"
  echo "  ./lr down <name>          # Remove domain"
  echo "  ./lr check <name>         # Verify certificate for domain"
  echo "  ./lr refresh              # Restart the docker containers"
  echo "  ./lr rebuild              # Rebuild the Caddyfile"
  echo "  ./lr list                 # List the domains"
  echo "  ./lr setup                # Setup mkcert"
  exit 1
}

up() {
  local name="$1"
  local port="$2"
  echo "--- Debug: up() called with name='$name', port='$port'"
  echo "--- Debug: DOMAINS path is '$DOMAINS', DOMAINS.tmp path is '$DOMAINS.tmp'"
  echo "--- Debug: Current directory is '$(pwd)'"

  [ -f "$DOMAINS" ] || { echo "--- Debug: $DOMAINS does not exist, attempting to touch it."; touch "$DOMAINS"; }
  echo "--- Debug: Content of $DOMAINS before grep:"
  cat "$DOMAINS" || echo "--- Debug: Failed to cat $DOMAINS"
  echo "--- Debug: End of $DOMAINS content (or error if failed to cat)."

  if [ -z "$name" ] || [ -z "$port" ]; then
    echo "--- Debug: name ('$name') or port ('$port') is empty. Calling usage."
    usage
  fi

  echo "--- Debug: Ensuring mkcert directory exists."
  mkdir -p "${SCRIPT_DIR}/mkcert"
  echo "--- Debug: Generating certificate for ${name}.localhost"
  mkcert -cert-file "${SCRIPT_DIR}/mkcert/${name}.localhost.pem" -key-file "${SCRIPT_DIR}/mkcert/${name}.localhost-key.pem" "${name}.localhost"
  if [ $? -ne 0 ]; then
    echo "--- Debug: ERROR - Failed to generate certificate for ${name}.localhost. Exiting."
    exit 1
  else
    echo "--- Debug: Successfully generated certificate for ${name}.localhost."
  fi

  echo "--- Debug: Attempting to touch $DOMAINS.tmp to check writability."
  touch "$DOMAINS.tmp" || { echo "--- Debug: CRITICAL - Failed to touch $DOMAINS.tmp. Please check permissions. Exiting."; exit 1; }
  echo "--- Debug: Successfully touched $DOMAINS.tmp (or it already existed)."

  echo "--- Debug: About to grep '$DOMAINS' for lines NOT matching '^${name}:' into '$DOMAINS.tmp'"
  grep -v "^${name}:" "$DOMAINS" > "$DOMAINS.tmp" 2> "$DOMAINS.grep_stderr.log"
  local grep_exit_code=$?
  echo "--- Debug: grep exit code: $grep_exit_code."
  echo "--- Debug: Content of $DOMAINS.tmp after grep:"
  cat "$DOMAINS.tmp" || echo "--- Debug: Failed to cat $DOMAINS.tmp"
  echo "--- Debug: Standard error from grep (if any) from $DOMAINS.grep_stderr.log:"
  cat "$DOMAINS.grep_stderr.log" || echo "--- Debug: No stderr log from grep, or failed to cat it."

  echo "--- Debug: About to echo '${name}:${port}' >> '$DOMAINS.tmp'"
  echo "${name}:${port}" >> "$DOMAINS.tmp"
  echo "--- Debug: Content of $DOMAINS.tmp after echo:"
  cat "$DOMAINS.tmp" # Show what echo added

  echo "--- Debug: About to mv '$DOMAINS.tmp' to '$DOMAINS'"
  mv "$DOMAINS.tmp" "$DOMAINS"
  echo "--- Debug: mv command finished. Checking if $DOMAINS exists and its content:"
  if [ -f "$DOMAINS" ]; then cat "$DOMAINS"; else echo "--- Debug: $DOMAINS does not exist after mv."; fi

  # Add to /etc/hosts
  local host_entry="127.0.0.1 ${name}.localhost"
  echo "--- Debug: Checking for '${host_entry}' in /etc/hosts"
  if ! grep -qF -- "$host_entry" /etc/hosts; then
    read -p "Do you want to add '${host_entry}' to /etc/hosts? (y/N) " response
    if [[ "$response" =~ ^[Yy]$ ]]; then
      echo "--- Debug: Adding '$host_entry' to /etc/hosts"
      if ! echo "$host_entry" | sudo tee -a /etc/hosts > /dev/null; then
        echo "--- Debug: ERROR - Failed to add '$host_entry' to /etc/hosts. Check sudo permissions and if /etc/hosts is writable."
      else
        echo "--- Debug: Successfully added '$host_entry' to /etc/hosts."
      fi
    else
      echo "--- Debug: Skipped adding '$host_entry' to /etc/hosts."
    fi
  else
    echo "--- Debug: Entry '$host_entry' already exists in /etc/hosts"
  fi

  rebuild_caddyfile
  refresh
}

down() {
  local name="$1"
  [ -f "$DOMAINS" ] || touch "$DOMAINS"
  if [ -z "$name" ]; then usage; fi
  grep -v "^${name}:" "$DOMAINS" > "$DOMAINS.tmp"
  mv "$DOMAINS.tmp" "$DOMAINS"

  # Remove from /etc/hosts
  local host_entry="127.0.0.1 ${name}.localhost"
  echo "--- Debug: Checking for '${host_entry}' in /etc/hosts"
  if grep -qF -- "$host_entry" /etc/hosts; then
    read -p "Do you want to remove '${host_entry}' from /etc/hosts? (y/N) " response
    if [[ "$response" =~ ^[Yy]$ ]]; then
      echo "--- Debug: Removing '$host_entry' from /etc/hosts"
      # Create a backup and then use sed to delete the line. BSD sed requires -i ''.
      if sudo cp /etc/hosts /etc/hosts.bak && sudo sed -i'' -e "/^${host_entry//\//\\/}$/d" /etc/hosts; then
        echo "--- Debug: Successfully removed '$host_entry' from /etc/hosts. Backup created at /etc/hosts.bak"
      else
        echo "--- Debug: ERROR - Failed to remove '$host_entry' from /etc/hosts. Check sudo permissions."
        echo "--- Debug: /etc/hosts may have been backed up to /etc/hosts.bak. Please check."
      fi
    else
      echo "--- Debug: Skipped removing '$host_entry' from /etc/hosts."
    fi
  else
    echo "--- Debug: Entry '$host_entry' not found in /etc/hosts, skipping removal."
  fi

  rebuild_caddyfile
  refresh
}

check() {
  local name="$1"
  if [ -z "$name" ]; then
    echo "Error: Missing name for check command."
    usage
  fi

  if ! is_mkcert_installed; then
    echo "mkcert is not installed. Please run ./lr setup first."
    exit 1
  fi

  local caroot
  caroot=$(mkcert -CAROOT)
  if [ -z "$caroot" ]; then
    echo "Error: Could not determine mkcert CAROOT. Ensure mkcert is configured correctly."
    exit 1
  fi

  local cacert_path="${caroot}/rootCA.pem"
  if [ ! -f "$cacert_path" ]; then
    echo "Error: Root CA certificate not found at ${cacert_path}. Please run ./lr setup or check mkcert configuration."
    exit 1
  fi

  echo "--- Debug: Verifying certificate for https://${name}.localhost using CA at ${cacert_path}"
  curl -v "https://${name}.localhost" --cacert "${cacert_path}"
}

refresh() {
  docker compose up -d
  docker exec caddy-localhost-router caddy reload --config /etc/caddy/Caddyfile || true
}

rebuild_caddyfile() {
  cp "$BASE" "$CADDYFILE"
  while IFS=: read -r name port; do
    cat >> "$CADDYFILE" <<EOF
${name}.localhost {
  tls /certs/${name}.localhost.pem /certs/${name}.localhost-key.pem
  reverse_proxy host.docker.internal:${port}
}
EOF
  done < "$DOMAINS"
}

list() {
  cat "$DOMAINS"
}


case "$CMD" in
  setup)
    setup
    ;;
  up)
    up "$NAME" "$PORT"
    ;;
  down)
    down "$NAME"
    ;;
  check)
    check "$NAME"
    ;;
  list)
    list
    ;;
  rebuild)
    rebuild_caddyfile
    ;;
  refresh)
    refresh
    ;;
  *)
    usage
    ;;
esac
